# -*- coding: UTF-8 -*-
"""
整数中1出现的次数（从1到n的整数中1出现的次数）。
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,
但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。

解题思路：
方法一：暴力法。逐个统计从1到n的整数区间内每个整数中1的次数，然后加和
方法二：数学规律。将从1到n的整数区间看作一个整体，不再是逐个统计每个整数，而是统计个位上的1、十位上的1、百位上的1 …… 然后加和
以统计百位上的1 为例：
设最大值n为31456，百位上1的次数为：32*100 。高位区间为00~31，低位区间为100~199
设最大值n为31156，百位上1的次数为：31*100 + 57。高位区间为00~30，低位区间为100~156
设最大值n为31056，百位上1的次数为：31*100。高位区间为00~30，低位区间为100~199
由上可知，
若n的百位大于1（2~9），则百位上1的次数为 (n//1000 + 1)*100；
若n的百位等于1，则百位上1的次数为 (n//1000)*100 + (n%100 + 1)；
若n的百位等于0，则百位上1的次数为 (n//1000)*100 。
由上可知，若n的百位大于1，则n//1000 + 1，否则为n//1000。通过 (n//100 + 8)//10 来得到n//1000 + 1 或 n//1000
例如：31256 代入 (n//100 + 8)//10 得到 32；31156 代入 (n//100 + 8)//10 得到 31；31056 代入 (n//100 + 8)//10 得到 31；
"""


class Solution1:
    # 暴力法
    def NumberOf1Between1AndN_Solution(self, n):
        count = 0
        for i in range(1, n + 1):
            while i > 0:
                if i % 10 == 1:
                    count += 1
                i = i / 10
        return count


class Solution2:
    # 数学规律
    def NumberOf1Between1AndN_Solution(self, n):
        count = 0
        # 从个位开始统计，然后统计十位、百位、千位……
        m = 1
        while m <= n:
            # n // m % 10 == 1，以m等于100为例，用于判断百位是否为1。若为1，则返回1(True)，否则返回0(False)
            count += (n // m + 8) // 10 * m + (n // m % 10 == 1) * (n % m + 1)
            m *= 10
        return count
