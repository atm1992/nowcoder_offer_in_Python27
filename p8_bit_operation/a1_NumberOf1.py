#-*- coding: UTF-8 -*-
"""
二进制中1的个数。
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

解题思路：按位与。n&(n-1)
对于一个不为0的整数n，其二进制表示中至少存在一个1。若让n减去1，则原来的二进制中最右侧的1将变为0，
而其后的所有0将变成1（如果最右侧的1后边还有二进制位的话），最右侧的1前边的二进制位不受影响。
此时可通过 n&(n-1) 将n的二进制中最右侧的1及其后所有的二进制位都变成0，从而消去了n的二进制中最右侧的一个1，
以此循环，每次都消去最右侧的一个1，当n等于0时，退出循环，便可得到结果

注意：计算机内部是使用二进制补码形式来存储数据的（无论正负数），
因此对于任意一个小的负数，1的个数都会很多，因为负数的二进制高位均为1。这里用32位来表示一个整数
"""


class Solution:
    def NumberOf1(self, n):
        count = 0
        # 考虑负数。负数到最后就剩符号位为1（即 -4294967296），而0xffffffff=4294967295，4294967295 & -4294967296的结果为0
        while n & 0xffffffff != 0:
            count += 1
            n &= n - 1
        return count
